// <auto-generated />
using System;
using KUB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KUB.Infrastructure.Migrations
{
    [DbContext(typeof(ManagementGamesDB))]
    partial class ManagementGamesDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KUB.Core.Models.BaseEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.Property<Guid>("JuryInPanelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JuryPanelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JuryParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentWithJuryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JuryInPanelId");

                    b.HasIndex("JuryPanelId");

                    b.HasIndex("JuryParticipantId");

                    b.HasIndex("TournamentWithJuryId");

                    b.ToTable("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Property<Guid>("PanelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Panel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PanelId")
                        .HasName("PK_Коллегии судей");

                    b.ToTable("JuryPanels");

                    b.HasData(
                        new
                        {
                            PanelId = new Guid("343c74d9-4cc3-4751-b903-6e37adcab7d8"),
                            Panel = "Нанимающиеся на работу"
                        },
                        new
                        {
                            PanelId = new Guid("c5f3ae6e-7249-4921-808e-bd299ca2c492"),
                            Panel = "Направляющие на переговоры"
                        },
                        new
                        {
                            PanelId = new Guid("051265ea-4907-4824-8955-d0cae439dacf"),
                            Panel = "Направляющие на переговоры"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec410634-fc15-4265-8082-3a7ecdce6a16"),
                            Address = "Пушкина 1",
                            City = "Томск"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BlitzGameRank")
                        .HasColumnType("int");

                    b.Property<bool>("CanBeAJury")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassicGameRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Patronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84569a49-4578-45cd-97af-3348a295f6c8"),
                            BlitzGameRank = 1,
                            CanBeAJury = true,
                            ClassicGameRank = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Иван",
                            ParticipantId = new Guid("8d92c559-7044-4ab8-a5f3-b740e89cfdb5"),
                            Patronym = "Иванович",
                            Surname = "Иванов"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.Property<Guid>("ParticipantInSchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParticipantSchoolId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchoolParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParticipantInSchoolId");

                    b.HasIndex("ParticipantSchoolId");

                    b.ToTable("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.Property<Guid>("TournamentWithParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantInId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParticipantRoleId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TournamentWithParticipantId", "ParticipantInId")
                        .HasName("PK_Участники в турнирах");

                    b.HasIndex("ParticipantInId");

                    b.HasIndex("ParticipantRoleId");

                    b.ToTable("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("eddd5acc-32b6-4e28-8fa8-617fe8e3da7b"),
                            RoleName = "Не выбрана"
                        },
                        new
                        {
                            RoleId = new Guid("031f6a84-3d6f-4370-bb64-7bbabcfe835e"),
                            RoleName = "Зритель"
                        },
                        new
                        {
                            RoleId = new Guid("bf009a0f-64f8-4737-9daf-d652f050b13f"),
                            RoleName = "Игрок"
                        },
                        new
                        {
                            RoleId = new Guid("dba14a2d-c279-4bf8-bafe-f3411eadbecc"),
                            RoleName = "Секундант"
                        },
                        new
                        {
                            RoleId = new Guid("95b72e2e-26e5-40f4-983b-078761abd750"),
                            RoleName = "Судья"
                        },
                        new
                        {
                            RoleId = new Guid("73e25ef3-fe93-4b06-9773-2076cd4e30a9"),
                            RoleName = "Арбитр"
                        },
                        new
                        {
                            RoleId = new Guid("3795e34b-6f3b-4466-8ea8-5e0604df287c"),
                            RoleName = "Секретарь"
                        },
                        new
                        {
                            RoleId = new Guid("0a7d298b-6448-4d47-bd28-78e8afa6c71a"),
                            RoleName = "Тренер"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Property<Guid>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            SchoolId = new Guid("221ef3c0-3615-4fc7-86bc-411289771405"),
                            SchoolName = "Нет школы"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time")
                        .IsFixedLength();

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time")
                        .IsFixedLength();

                    b.Property<Guid>("TournamentFormatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentGridId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TournamentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TournamentFormatId");

                    b.HasIndex("TournamentGridId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61bd568c-5fb6-4302-af89-da59b4dadb36"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("ec410634-fc15-4265-8082-3a7ecdce6a16"),
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("da5a3e86-df85-4f70-a811-b11f2d26ade6"),
                            TournamentGridId = new Guid("9f264d6a-c081-42f7-9d21-3898dc528827"),
                            TournamentName = "Турнир в Томске",
                            TournamentTypeId = new Guid("8cc7a19a-0cb8-446f-a7c0-b5f6f771ba1c")
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Property<Guid>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FormatId")
                        .HasName("PK_Формат проведения");

                    b.ToTable("TournamentFormats");

                    b.HasData(
                        new
                        {
                            FormatId = new Guid("da5a3e86-df85-4f70-a811-b11f2d26ade6"),
                            Format = "Оффлайн"
                        },
                        new
                        {
                            FormatId = new Guid("b24d4ff9-f3c6-4a51-8457-8ea63fd138fb"),
                            Format = "Онлайн"
                        },
                        new
                        {
                            FormatId = new Guid("310425a2-5f9f-46ae-91e2-4927b444a85b"),
                            Format = "Гибридный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Property<Guid>("GridId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GridId")
                        .HasName("PK_Вариант сетки турнира");

                    b.ToTable("TournamentGridTypes");

                    b.HasData(
                        new
                        {
                            GridId = new Guid("c82599b5-1e1c-4067-88e1-f2d80d14afdd"),
                            Type = "Каждый с каждым"
                        },
                        new
                        {
                            GridId = new Guid("f00243d9-ba54-4df1-94ee-5ae6a593a88a"),
                            Type = "Навылет"
                        },
                        new
                        {
                            GridId = new Guid("9f264d6a-c081-42f7-9d21-3898dc528827"),
                            Type = "По командам"
                        },
                        new
                        {
                            GridId = new Guid("9e6ad8d4-ff74-4c2f-9c7b-07fc2cef8639"),
                            Type = "Комбинированный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Property<Guid>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId")
                        .HasName("PK_Типы турниров");

                    b.ToTable("TournamentTypes");

                    b.HasData(
                        new
                        {
                            TypeId = new Guid("8cc7a19a-0cb8-446f-a7c0-b5f6f771ba1c"),
                            Type = "Практикум"
                        },
                        new
                        {
                            TypeId = new Guid("1e79cb93-5137-442e-8a47-991d168c1ee3"),
                            Type = "Товарищеский"
                        },
                        new
                        {
                            TypeId = new Guid("4637f7a0-a934-4135-8680-a34de1848272"),
                            Type = "Именной"
                        },
                        new
                        {
                            TypeId = new Guid("f50f9026-7c63-4ba4-8639-a0fcca004592"),
                            Type = "Отборочный"
                        },
                        new
                        {
                            TypeId = new Guid("ae446207-6b4c-46eb-9503-92381bead9de"),
                            Type = "Финал года"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.HasOne("KUB.Core.Models.JuryPanel", "JuryPanel")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("JuryPanelId")
                        .HasConstraintName("FK_Судьи в коллегиях_Коллегии судей");

                    b.HasOne("KUB.Core.Models.Participant", "JuryParticipant")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("JuryParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Судьи в коллегиях_Участники1");

                    b.HasOne("KUB.Core.Models.Tournament", "TournamentWithJury")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("TournamentWithJuryId")
                        .IsRequired()
                        .HasConstraintName("FK_Судьи в коллегиях_Турниры");

                    b.Navigation("JuryPanel");

                    b.Navigation("JuryParticipant");

                    b.Navigation("TournamentWithJury");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "ParticipantInSchoolNavigation")
                        .WithOne("ParticipantInSchool")
                        .HasForeignKey("KUB.Core.Models.ParticipantInSchool", "ParticipantInSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Участники в школах_Участники");

                    b.HasOne("KUB.Core.Models.School", "ParticipantSchool")
                        .WithMany("ParticipantInSchools")
                        .HasForeignKey("ParticipantSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Участники в школах_Школы");

                    b.Navigation("ParticipantInSchoolNavigation");

                    b.Navigation("ParticipantSchool");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "ParticipantInTournamentNavigation")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("ParticipantInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Участники в турнирах_Участники");

                    b.HasOne("KUB.Core.Models.Role", "ParticipantRole")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("ParticipantRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Участники в турнирах_Роли");

                    b.HasOne("KUB.Core.Models.Tournament", "TournamentWithParticipant")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("TournamentWithParticipantId")
                        .IsRequired()
                        .HasConstraintName("FK_Участники в турнирах_Турниры");

                    b.Navigation("ParticipantInTournamentNavigation");

                    b.Navigation("ParticipantRole");

                    b.Navigation("TournamentWithParticipant");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.HasOne("KUB.Core.Models.Location", "Location")
                        .WithMany("Tournaments")
                        .HasForeignKey("LocationId")
                        .IsRequired()
                        .HasConstraintName("FK_Турниры_Место1");

                    b.HasOne("KUB.Core.Models.TournamentFormat", "TournamentFormat")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentFormatId")
                        .IsRequired()
                        .HasConstraintName("FK_Турниры_Формат проведения");

                    b.HasOne("KUB.Core.Models.TournamentGridType", "TournamentGrid")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentGridId")
                        .IsRequired()
                        .HasConstraintName("FK_Турниры_Вариант сетки турнира");

                    b.HasOne("KUB.Core.Models.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Турниры_Типы турниров");

                    b.Navigation("Location");

                    b.Navigation("TournamentFormat");

                    b.Navigation("TournamentGrid");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Navigation("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.Location", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInSchool")
                        .IsRequired();

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Navigation("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
