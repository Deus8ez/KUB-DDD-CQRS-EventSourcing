// <auto-generated />
using System;
using KUB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KUB.Infrastructure.Migrations
{
    [DbContext(typeof(ManagementGamesDB))]
    partial class ManagementGamesDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KUB.Core.Models.BaseEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JuryPanelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JuryPanelId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TournamentId");

                    b.ToTable("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Panel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JuryPanels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b85ffe2a-e024-4875-aedb-ed36be8e64e0"),
                            Panel = "Нанимающиеся на работу"
                        },
                        new
                        {
                            Id = new Guid("f1ba7178-3372-45fe-82e1-88596b44b4eb"),
                            Panel = "Направляющие на переговоры"
                        },
                        new
                        {
                            Id = new Guid("98b10d3d-2ea4-4624-b645-ae81bd933c5b"),
                            Panel = "Направляющие на переговоры"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BlitzGameRank")
                        .HasColumnType("int");

                    b.Property<bool>("CanBeAJury")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassicGameRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cb31029-2272-4956-8eb4-ec76d043c7d8"),
                            BlitzGameRank = 1,
                            CanBeAJury = true,
                            ClassicGameRank = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Иван",
                            Patronym = "Иванович",
                            Surname = "Иванов"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TournamentId");

                    b.ToTable("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4613ff2-a5cb-474c-abcd-4378c95517b2"),
                            RoleName = "Не выбрана"
                        },
                        new
                        {
                            Id = new Guid("dcb4b5af-471c-470c-aa20-5f719ec249cf"),
                            RoleName = "Зритель"
                        },
                        new
                        {
                            Id = new Guid("dab9a690-19e1-4b6e-b440-d553a0bba5bc"),
                            RoleName = "Игрок"
                        },
                        new
                        {
                            Id = new Guid("5309134e-7eb1-4af1-a02b-f5544258d9d8"),
                            RoleName = "Секундант"
                        },
                        new
                        {
                            Id = new Guid("536b40bb-5e6c-40fb-82c9-57422b7b0a7a"),
                            RoleName = "Судья"
                        },
                        new
                        {
                            Id = new Guid("be42f885-8d02-49d4-a27f-c3bbf6dcf056"),
                            RoleName = "Арбитр"
                        },
                        new
                        {
                            Id = new Guid("8d6c9521-3ee1-43d2-9a08-55b64ee9c83d"),
                            RoleName = "Секретарь"
                        },
                        new
                        {
                            Id = new Guid("d1f1cccf-ef20-414c-ab65-8091e5b9932a"),
                            RoleName = "Тренер"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69fae499-b8b9-45b5-9090-64f2ba1b8f1f"),
                            SchoolName = "Нет школы"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("TournamentFormatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentGridId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TournamentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentFormatId");

                    b.HasIndex("TournamentGridId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ba58061-2d36-4b64-acab-c511bd6ca120"),
                            Address = "Пушкина0",
                            City = "Томск",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            Number = 0,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("d5b75fdf-0b96-42e8-8bde-63a55f0ce84d"),
                            TournamentGridId = new Guid("8a09b011-3f5d-4ee3-90e3-860c1e00c69c"),
                            TournamentName = "Турнир в Томске0",
                            TournamentTypeId = new Guid("e87ca25b-e2d2-4c2a-8703-bed7fee08dd6")
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5b75fdf-0b96-42e8-8bde-63a55f0ce84d"),
                            Format = "Оффлайн"
                        },
                        new
                        {
                            Id = new Guid("33592ac7-4262-4f64-b382-26776320cc65"),
                            Format = "Онлайн"
                        },
                        new
                        {
                            Id = new Guid("7a46d039-8512-4391-9d84-d82051c15dd3"),
                            Format = "Гибридный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentGridTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c793506-6347-4bc6-982a-ab7a582ea233"),
                            Type = "Каждый с каждым"
                        },
                        new
                        {
                            Id = new Guid("e66f3524-3b18-4fec-aa02-85eefcd8ad8d"),
                            Type = "Навылет"
                        },
                        new
                        {
                            Id = new Guid("8a09b011-3f5d-4ee3-90e3-860c1e00c69c"),
                            Type = "По командам"
                        },
                        new
                        {
                            Id = new Guid("53ed7ad6-d4a8-437d-90a7-00d6a837fab6"),
                            Type = "Комбинированный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e87ca25b-e2d2-4c2a-8703-bed7fee08dd6"),
                            Type = "Практикум"
                        },
                        new
                        {
                            Id = new Guid("755a1272-5ca4-4ab0-acdd-6b7d19aed898"),
                            Type = "Товарищеский"
                        },
                        new
                        {
                            Id = new Guid("05b6c671-26fa-4351-a6fd-05324fc73647"),
                            Type = "Именной"
                        },
                        new
                        {
                            Id = new Guid("dfbd568d-4a8f-417d-bd92-008cbcff3ca8"),
                            Type = "Отборочный"
                        },
                        new
                        {
                            Id = new Guid("45f5d608-30bf-4cd3-859b-fe270d48dfe9"),
                            Type = "Финал года"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.HasOne("KUB.Core.Models.JuryPanel", "Panel")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("JuryPanelId");

                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");

                    b.Navigation("Participant");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithOne("ParticipantInSchool")
                        .HasForeignKey("KUB.Core.Models.ParticipantInSchool", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.School", "School")
                        .WithMany("ParticipantInSchools")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Participant");

                    b.Navigation("School");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Role", "Role")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("RoleId");

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Role");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.HasOne("KUB.Core.Models.TournamentFormat", "TournamentFormat")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentGridType", "TournamentGrid")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentGridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TournamentFormat");

                    b.Navigation("TournamentGrid");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Navigation("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInSchool")
                        .IsRequired();

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Navigation("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
