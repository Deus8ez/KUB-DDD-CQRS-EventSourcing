// <auto-generated />
using System;
using KUB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KUB.Infrastructure.Migrations
{
    [DbContext(typeof(ManagementGamesDB))]
    [Migration("20220223101117_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KUB.Core.Models.BaseEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JuryPanelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JuryPanelId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TournamentId");

                    b.ToTable("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Panel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JuryPanels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8f63b05-8629-49ac-841c-081486e865ad"),
                            Panel = "Нанимающиеся на работу"
                        },
                        new
                        {
                            Id = new Guid("5d450b14-e04d-4bda-9dd5-de7cc4d77a79"),
                            Panel = "Направляющие на переговоры"
                        },
                        new
                        {
                            Id = new Guid("817bb351-7318-45a4-9460-434c9d3c9c97"),
                            Panel = "Направляющие на переговоры"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Address = "Пушкина 1",
                            City = "Томск"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BlitzGameRank")
                        .HasColumnType("int");

                    b.Property<bool>("CanBeAJury")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassicGameRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b07d5ba0-bdea-4232-a25c-d5168eb6ea8c"),
                            BlitzGameRank = 1,
                            CanBeAJury = true,
                            ClassicGameRank = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Иван",
                            Patronym = "Иванович",
                            Surname = "Иванов"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TournamentId");

                    b.ToTable("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c88f6362-3f09-407e-9258-cb159976a2d9"),
                            RoleName = "Не выбрана"
                        },
                        new
                        {
                            Id = new Guid("08cbe5b1-bd3e-415e-b91e-e880a770655e"),
                            RoleName = "Зритель"
                        },
                        new
                        {
                            Id = new Guid("c587d294-d1fa-44de-ba28-5abfb7426d5b"),
                            RoleName = "Игрок"
                        },
                        new
                        {
                            Id = new Guid("d7a15620-714d-419c-a5ba-6dea98667d03"),
                            RoleName = "Секундант"
                        },
                        new
                        {
                            Id = new Guid("1801bd8f-eeaf-459b-b09c-67a222704784"),
                            RoleName = "Судья"
                        },
                        new
                        {
                            Id = new Guid("8bcbf89d-e29e-43e8-9a66-4ba5d2095ff8"),
                            RoleName = "Арбитр"
                        },
                        new
                        {
                            Id = new Guid("1b159fe3-c44f-4d8c-ab9c-672e870f50f6"),
                            RoleName = "Секретарь"
                        },
                        new
                        {
                            Id = new Guid("a25815e0-b2e8-475f-9161-1615a5fc05c5"),
                            RoleName = "Тренер"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef64f1c6-e7a5-4ecf-9c0c-a09d7587ef34"),
                            SchoolName = "Нет школы"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("TournamentFormatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentGridId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TournamentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TournamentFormatId");

                    b.HasIndex("TournamentGridId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e855da7-a2e5-46e8-8378-5622a59a15d0"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 0,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске0",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("3992536b-e6ce-4c28-842f-4b9bbc003275"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 1,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске1",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("a2055e1d-fc20-41a2-8286-bd894a465c63"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 2,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске2",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("eae717ca-b041-4ac6-a230-831618d7cc5d"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 3,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске3",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("63d7e7ad-a2d3-43df-99e4-1d5a4f249b71"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 4,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске4",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("cf0b7407-f977-4415-a530-675ee9dd423b"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 5,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске5",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("6343a498-7143-479a-9659-5ac61f41d27a"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 6,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске6",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("f6a0effc-f446-40a9-9f09-d76f7217110c"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 7,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске7",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("48c9dfef-4bec-4163-aeaa-b028c085e2a1"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 8,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске8",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("9eaf6eb7-42d9-4a96-b430-a7c8e2b56758"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 9,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске9",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("0e47e4d1-6b60-45b5-810f-4c50839ef0bf"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 10,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске10",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("47f41cdf-882a-4255-b587-4d70963ed041"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 11,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске11",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("edcf451e-ff2e-42af-9916-0a11e7751bc4"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 12,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске12",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("4a524976-78d0-4b02-b664-dfe2c8ca84d1"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 13,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске13",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("747d2c65-89bc-4e67-93ce-0704a7eac4cd"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 14,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске14",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("07f0d44d-890c-44b2-bf59-8b0a6caac912"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 15,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске15",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("e0095e88-0c51-4d0b-988e-ba6362ddaad8"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 16,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске16",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("0e5c6a6d-7c40-454d-8c00-35b4350d206c"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 17,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске17",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("3a09d495-b23b-4e98-a302-0fd00d69f388"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 18,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске18",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("79002589-2f99-4458-99e8-1862c2c93b93"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 19,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске19",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("15dc2a6b-fb35-41b8-8cbf-d98252643e29"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 20,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске20",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("6223273a-b7b3-460c-a3a6-2f530bf0b423"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 21,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске21",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("c162548f-ec4e-466d-822f-04a675c8caa2"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 22,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске22",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("646df05a-b45a-4d23-a3a2-bc204c793c93"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 23,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске23",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("c423fad4-a032-4b67-8c3e-787da632f7e3"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 24,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске24",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("b4883514-8c03-4d22-a8a0-f173fe612845"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 25,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске25",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("99618622-de9c-40ed-969b-9b17e328972a"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 26,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске26",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("4d62af2a-0252-4e20-b95e-8de83a5ec8bd"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 27,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске27",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("24d2d9e0-4319-4c88-956f-e6b9da41fa09"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 28,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске28",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        },
                        new
                        {
                            Id = new Guid("36cdce96-fb14-4f93-820b-f5031dfcad79"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            LocationId = new Guid("dd63af0d-c18d-49a5-bc2e-15189663ea78"),
                            Number = 29,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            TournamentGridId = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            TournamentName = "Турнир в Томске29",
                            TournamentTypeId = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497")
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6f26c86-e0e2-4018-8d75-503cd7ba960f"),
                            Format = "Оффлайн"
                        },
                        new
                        {
                            Id = new Guid("a1547ce1-ae7b-4b52-b9a4-8a237cc83ef7"),
                            Format = "Онлайн"
                        },
                        new
                        {
                            Id = new Guid("b2d8d691-951b-47f1-a7bc-cfad2fc6e3f8"),
                            Format = "Гибридный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentGridTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bc25419-2769-4e77-b838-3f8c74160800"),
                            Type = "Каждый с каждым"
                        },
                        new
                        {
                            Id = new Guid("2b46fa18-d505-458f-9392-04987392c893"),
                            Type = "Навылет"
                        },
                        new
                        {
                            Id = new Guid("f6e04f2b-626c-4830-a19c-b6d943e8bc58"),
                            Type = "По командам"
                        },
                        new
                        {
                            Id = new Guid("9ea90e37-e855-4f92-b727-5ea5348c98ca"),
                            Type = "Комбинированный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e955afbf-a618-4ce4-9c3d-3815d4964497"),
                            Type = "Практикум"
                        },
                        new
                        {
                            Id = new Guid("1fbc32ae-010a-4199-9c2b-549fc182aed4"),
                            Type = "Товарищеский"
                        },
                        new
                        {
                            Id = new Guid("07f54603-3093-45b9-94bb-4d5322636861"),
                            Type = "Именной"
                        },
                        new
                        {
                            Id = new Guid("263d3dd2-c4b3-4156-a17d-bfd32dcae3ab"),
                            Type = "Отборочный"
                        },
                        new
                        {
                            Id = new Guid("5d69d15e-ec6c-4319-923b-e0c8af37b358"),
                            Type = "Финал года"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.HasOne("KUB.Core.Models.JuryPanel", "Panel")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("JuryPanelId");

                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");

                    b.Navigation("Participant");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithOne("ParticipantInSchool")
                        .HasForeignKey("KUB.Core.Models.ParticipantInSchool", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.School", "School")
                        .WithMany("ParticipantInSchools")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Participant");

                    b.Navigation("School");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Role", "Role")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Role");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.HasOne("KUB.Core.Models.Location", "Location")
                        .WithMany("Tournaments")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentFormat", "TournamentFormat")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentGridType", "TournamentGrid")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentGridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("TournamentFormat");

                    b.Navigation("TournamentGrid");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Navigation("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.Location", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInSchool")
                        .IsRequired();

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Navigation("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
