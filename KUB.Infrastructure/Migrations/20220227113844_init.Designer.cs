// <auto-generated />
using System;
using KUB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KUB.Infrastructure.Migrations
{
    [DbContext(typeof(ManagementGamesDB))]
    [Migration("20220227113844_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KUB.Core.Models.BaseEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JuryPanelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JuryPanelId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TournamentId");

                    b.ToTable("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Panel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JuryPanels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35260ea7-f8c0-4dc9-b5db-5eb1c3f6f9fd"),
                            Panel = "Нанимающиеся на работу"
                        },
                        new
                        {
                            Id = new Guid("7e96ada8-98ec-42bc-92bf-c7fa450008d3"),
                            Panel = "Направляющие на переговоры"
                        },
                        new
                        {
                            Id = new Guid("09b5071a-007f-4c00-bec7-35d0e7ac322a"),
                            Panel = "Направляющие на переговоры"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BlitzGameRank")
                        .HasColumnType("int");

                    b.Property<bool>("CanBeAJury")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassicGameRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18bd477b-ca58-4043-a604-97f982af5adb"),
                            BlitzGameRank = 1,
                            CanBeAJury = true,
                            ClassicGameRank = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Иван",
                            Patronym = "Иванович",
                            Surname = "Иванов"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TournamentId");

                    b.ToTable("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b932ba3e-db64-46c3-a9c6-b670e3c6bfb4"),
                            RoleName = "Не выбрана"
                        },
                        new
                        {
                            Id = new Guid("3ad11b96-7179-4b1b-b952-d424baa65063"),
                            RoleName = "Зритель"
                        },
                        new
                        {
                            Id = new Guid("995eddbf-f325-4d2d-aac1-0c50a6f2fdda"),
                            RoleName = "Игрок"
                        },
                        new
                        {
                            Id = new Guid("db4aa28c-8972-4fe7-8e8e-23a834da51ed"),
                            RoleName = "Секундант"
                        },
                        new
                        {
                            Id = new Guid("34af7e1d-650e-442c-b3be-7009cc663452"),
                            RoleName = "Судья"
                        },
                        new
                        {
                            Id = new Guid("8a26c2d5-732d-4f86-949a-ccd1dadc008c"),
                            RoleName = "Арбитр"
                        },
                        new
                        {
                            Id = new Guid("aca33ae0-fa95-4646-a1e6-109e083bb004"),
                            RoleName = "Секретарь"
                        },
                        new
                        {
                            Id = new Guid("ea0d205d-cb52-4ce3-a5e5-4268aabc96e1"),
                            RoleName = "Тренер"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("999d00d8-37eb-4c40-9801-b093e8637418"),
                            SchoolName = "Нет школы"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("TournamentFormatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentGridId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TournamentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentFormatId");

                    b.HasIndex("TournamentGridId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89e4433c-587b-4ddd-a79f-e58c3edee594"),
                            Address = "Пушкина0",
                            City = "Томск",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            Number = 0,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("638d80b6-e2dc-44c5-8e30-9aea41961371"),
                            TournamentGridId = new Guid("0a2cdc81-9bb5-42ae-9845-4739926a04d0"),
                            TournamentName = "Турнир в Томске0",
                            TournamentTypeId = new Guid("07a66472-4864-49d4-807b-45caaf1700c9")
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("638d80b6-e2dc-44c5-8e30-9aea41961371"),
                            Format = "Оффлайн"
                        },
                        new
                        {
                            Id = new Guid("9fb332c4-3da5-4e21-b65a-40141bf16862"),
                            Format = "Онлайн"
                        },
                        new
                        {
                            Id = new Guid("f2d995eb-e723-4dc7-98fe-4546c89102eb"),
                            Format = "Гибридный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentGridTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19101977-e0b6-403b-bbfe-1f9936bd4173"),
                            Type = "Каждый с каждым"
                        },
                        new
                        {
                            Id = new Guid("a6438e73-e452-46ab-896d-0648b026444e"),
                            Type = "Навылет"
                        },
                        new
                        {
                            Id = new Guid("0a2cdc81-9bb5-42ae-9845-4739926a04d0"),
                            Type = "По командам"
                        },
                        new
                        {
                            Id = new Guid("2014f0b8-238a-41f4-9675-1b473f4e79eb"),
                            Type = "Комбинированный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07a66472-4864-49d4-807b-45caaf1700c9"),
                            Type = "Практикум"
                        },
                        new
                        {
                            Id = new Guid("93c12f4a-2739-42a4-a792-0c717779f5ec"),
                            Type = "Товарищеский"
                        },
                        new
                        {
                            Id = new Guid("1e52cfd3-7aa0-4155-8f19-99735b1fa964"),
                            Type = "Именной"
                        },
                        new
                        {
                            Id = new Guid("b982ea85-bb43-41d7-ade2-8e2fc8493f17"),
                            Type = "Отборочный"
                        },
                        new
                        {
                            Id = new Guid("f31c0d8b-4d69-433b-9d8f-e30e5989a73c"),
                            Type = "Финал года"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.HasOne("KUB.Core.Models.JuryPanel", "Panel")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("JuryPanelId");

                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");

                    b.Navigation("Participant");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithOne("ParticipantInSchool")
                        .HasForeignKey("KUB.Core.Models.ParticipantInSchool", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.School", "School")
                        .WithMany("ParticipantInSchools")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Participant");

                    b.Navigation("School");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Role", "Role")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("RoleId");

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Role");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.HasOne("KUB.Core.Models.TournamentFormat", "TournamentFormat")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentGridType", "TournamentGrid")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentGridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TournamentFormat");

                    b.Navigation("TournamentGrid");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Navigation("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInSchool")
                        .IsRequired();

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Navigation("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
