// <auto-generated />
using System;
using KUB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KUB.Infrastructure.Migrations
{
    [DbContext(typeof(ManagementGamesDB))]
    [Migration("20220226111408_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KUB.Core.Models.BaseEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JuryPanelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JuryPanelId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("TournamentId");

                    b.ToTable("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Panel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JuryPanels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ca4c875-3c7c-417a-b4fb-80f84daab701"),
                            Panel = "Нанимающиеся на работу"
                        },
                        new
                        {
                            Id = new Guid("ed201a24-dd57-47cb-b6d1-e1a132d5862b"),
                            Panel = "Направляющие на переговоры"
                        },
                        new
                        {
                            Id = new Guid("88f81266-0059-4bb2-837b-4c49f8bc9f2f"),
                            Panel = "Направляющие на переговоры"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BlitzGameRank")
                        .HasColumnType("int");

                    b.Property<bool>("CanBeAJury")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassicGameRank")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3b55f01-76ea-4c75-a9a6-cb815782048c"),
                            BlitzGameRank = 1,
                            CanBeAJury = true,
                            ClassicGameRank = 1,
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Иван",
                            Patronym = "Иванович",
                            Surname = "Иванов"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TournamentId");

                    b.ToTable("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32a3f9f9-9e66-41ca-9a97-a93b19a167b1"),
                            RoleName = "Не выбрана"
                        },
                        new
                        {
                            Id = new Guid("3b1b9c1f-772f-44c9-8838-a998ee546b11"),
                            RoleName = "Зритель"
                        },
                        new
                        {
                            Id = new Guid("6cb3cd92-90f6-4a05-b245-e6e2c6d645e6"),
                            RoleName = "Игрок"
                        },
                        new
                        {
                            Id = new Guid("e0c98ccb-3827-40fe-98df-609f16f55cc1"),
                            RoleName = "Секундант"
                        },
                        new
                        {
                            Id = new Guid("2934aac0-bdd4-4e24-b748-29586ab52e34"),
                            RoleName = "Судья"
                        },
                        new
                        {
                            Id = new Guid("553b4bf6-380d-449e-8518-0a9b1b9e24cb"),
                            RoleName = "Арбитр"
                        },
                        new
                        {
                            Id = new Guid("6d1763a6-17e2-452a-81dc-d6ba029082b1"),
                            RoleName = "Секретарь"
                        },
                        new
                        {
                            Id = new Guid("bda8d486-82fe-447c-8e79-0c4949da0e2d"),
                            RoleName = "Тренер"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc0eb01f-1664-4a60-9b5a-1103537b3d49"),
                            SchoolName = "Нет школы"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<Guid>("TournamentFormatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentGridId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TournamentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TournamentFormatId");

                    b.HasIndex("TournamentGridId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d3ebcf0-b4b7-45f5-98db-a4121e891372"),
                            Address = "Пушкина0",
                            City = "Томск",
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndTime = new TimeSpan(0, 0, 0, 0, 0),
                            Number = 0,
                            StartTime = new TimeSpan(0, 0, 0, 0, 0),
                            TournamentFormatId = new Guid("0875d603-3b26-4fa9-850f-a5d9c7c03c1b"),
                            TournamentGridId = new Guid("61453fc3-f129-4dd3-9282-e61a56a66e8d"),
                            TournamentName = "Турнир в Томске0",
                            TournamentTypeId = new Guid("384df408-f194-4922-8ff4-2abb0a5be368")
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0875d603-3b26-4fa9-850f-a5d9c7c03c1b"),
                            Format = "Оффлайн"
                        },
                        new
                        {
                            Id = new Guid("6677162d-d01c-48fe-8b0a-724315973bde"),
                            Format = "Онлайн"
                        },
                        new
                        {
                            Id = new Guid("6fcecfb6-a91a-4e37-8494-8d5ca117a50e"),
                            Format = "Гибридный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentGridTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2019b611-9075-4326-bb50-b32d13287a7a"),
                            Type = "Каждый с каждым"
                        },
                        new
                        {
                            Id = new Guid("2b19f75f-685d-47b8-b12e-d5dacce02bcb"),
                            Type = "Навылет"
                        },
                        new
                        {
                            Id = new Guid("61453fc3-f129-4dd3-9282-e61a56a66e8d"),
                            Type = "По командам"
                        },
                        new
                        {
                            Id = new Guid("ba19e2be-a89c-4415-9f90-82a61a5f80bd"),
                            Type = "Комбинированный"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("384df408-f194-4922-8ff4-2abb0a5be368"),
                            Type = "Практикум"
                        },
                        new
                        {
                            Id = new Guid("67009bb0-3b0e-4c21-a595-47a6caac4566"),
                            Type = "Товарищеский"
                        },
                        new
                        {
                            Id = new Guid("2c48823c-90cc-4bde-abea-890e33ba21fa"),
                            Type = "Именной"
                        },
                        new
                        {
                            Id = new Guid("9329b1c1-fbcb-460e-8f11-0a45e0fbeba2"),
                            Type = "Отборочный"
                        },
                        new
                        {
                            Id = new Guid("7a1bf0d5-5d9a-44a7-907c-df1ee8198c75"),
                            Type = "Финал года"
                        });
                });

            modelBuilder.Entity("KUB.Core.Models.JuryInPanel", b =>
                {
                    b.HasOne("KUB.Core.Models.JuryPanel", "Panel")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("JuryPanelId");

                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("JuryInPanels")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");

                    b.Navigation("Participant");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInSchool", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithOne("ParticipantInSchool")
                        .HasForeignKey("KUB.Core.Models.ParticipantInSchool", "ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.School", "School")
                        .WithMany("ParticipantInSchools")
                        .HasForeignKey("SchoolId");

                    b.Navigation("Participant");

                    b.Navigation("School");
                });

            modelBuilder.Entity("KUB.Core.Models.ParticipantInTournament", b =>
                {
                    b.HasOne("KUB.Core.Models.Participant", "Participant")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Role", "Role")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.Tournament", "Tournament")
                        .WithMany("ParticipantInTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Role");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.HasOne("KUB.Core.Models.TournamentFormat", "TournamentFormat")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentGridType", "TournamentGrid")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentGridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KUB.Core.Models.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TournamentFormat");

                    b.Navigation("TournamentGrid");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("KUB.Core.Models.JuryPanel", b =>
                {
                    b.Navigation("JuryInPanels");
                });

            modelBuilder.Entity("KUB.Core.Models.Participant", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInSchool")
                        .IsRequired();

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.Role", b =>
                {
                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.School", b =>
                {
                    b.Navigation("ParticipantInSchools");
                });

            modelBuilder.Entity("KUB.Core.Models.Tournament", b =>
                {
                    b.Navigation("JuryInPanels");

                    b.Navigation("ParticipantInTournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentFormat", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentGridType", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("KUB.Core.Models.TournamentType", b =>
                {
                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
